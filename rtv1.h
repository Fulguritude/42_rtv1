/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   rtv1.h                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: fulguritude <marvin@42.fr>                 +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2018/08/30 17:34:32 by fulguritu         #+#    #+#             */
/*   Updated: 2018/09/10 03:17:05 by fulguritu        ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef RTV1_H
# define RTV1_H

# define REN_W		480
# define REN_H		360

# define BG_COLOR	0x00BB0088

typedef struct	s_ray
{
	t_vec_3d	origin;
	t_vec_3d	dir; //unit vector
}				t_ray;

typedef struct	s_light_src
{
	t_vec_3d	origin;
	t_float		intensity;
}				t_light_src;

typedef struct	s_sphere
{
	t_vec_3d	center;
	t_float		radius;
	t_u32		color;
	t_float		albedo;
}				t_sphere;

typedef struct	s_control
{
	t_vec_3d	cam_pos;
	t_float		hrz_fov;
}				t_control;
/*
FOV is the angle centered on the camera, and that spans 0 to width - 1
	horizontally.

GEtting a ray's direction from the FOV angle:
x = j - W/2
y = i - H/2
z = - W/(2*tan(FOV/2))

Sphere/ray intersection
't' is the parameter that allows one to know where on the line generated by a ray they are (cur_point = origin + t * dir)
'center' is the sphere's center, 'radius' its radius

formula : t^2 + 2*t*<dir,origin - center> + quadnorm(origin - center) - radius^2 == 0

roots of the polynomial exist iff there is intersection (so use the discriminant of a degree 2 polynomial), and these roots (t1 and t2) are negative iff the object is behind the camera origin. If the roots are of different sign, then the camera origin is located inside the sphere

a contact point on a sphere is lighted according to the formula (albedo * <N, L>)/ (pi * dist(contact, spot)^2)
*/



#endif
